y <- rowSums(tst_design_matrix[, c("a", "b", "c")])
y
y <- rowSums(tst_design_matrix[, c("a", "b", "c")])
y_2 <- y + 1
tst_design_matrix <- cbind(tst_design_matrix, y, y_2)
tst_design_matrix
library(lme4)
fixef(lmer(y ~ a + (b + c | d), rl_tst))
ranef(lmer(y ~ a + (b + c | d), rl_tst))
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit("/", slash_term, fixed = T)
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
return(left_term, paste(left_term, expand_slash(remaining_term), sep = ":"))
}
else
{
return(left_term, paste(left_term, remaining_term, sep = ":"))
}
}
expand_slash("a/b")
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit("/", slash_term, fixed = T)
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
return(left_term, paste(left_term, expand_slash(remaining_term), sep = ":"))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b")
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit("/", slash_term, fixed = T)[1]
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
return(left_term, paste(left_term, expand_slash(remaining_term), sep = ":"))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b")
strsplit("a/b", "/", fixed = T)
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit(slash_term, "/",  fixed = T)[1]
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
return(left_term, paste(left_term, expand_slash(remaining_term), sep = ":"))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b")
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit(slash_term, "/",  fixed = T)[[1]]
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
return(left_term, paste(left_term, expand_slash(remaining_term), sep = ":"))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b")
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit(slash_term, "/",  fixed = T)[[1]]
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
expanded_terms_list <- expand_slash(remaining_term)
adjoined_expanded_terms <- lapply(expanded_terms_list(remaining_term), function(term) {paste(left_term, term, sep = ":")})
return(c(list(left_term), adjoined_expanded_terms))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b")
expand_slash("a/b/c")
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit(slash_term, "/",  fixed = T)[[1]]
left_term <- split_slash_term[1]
remaining_term <- paste(split_slash_term[-1], collapse = "/")
if (grepl("/", remaining_term, fixed = T))
{
expanded_terms_list <- expand_slash(remaining_term)
adjoined_expanded_terms <- lapply(expanded_terms_list, function(term) {paste(left_term, term, sep = ":")})
return(c(list(left_term), adjoined_expanded_terms))
}
else
{
return(list(left_term, paste(left_term, remaining_term, sep = ":")))
}
}
expand_slash("a/b/c")
ranef(lmer(y ~ a + (b + c | d/e), rl_tst))
ranef(lmer(y ~ a + ( c | d/e), rl_tst))
ranef(lmer(y ~ a + ( c | d/e/f), rl_tst))
ranef(lmer(y ~ a + ( c | d/e/d), rl_tst))
ranef(lmer(y ~ a + ( c | d/e/d/e), rl_tst))
expand_slash("a/b/c/d")
with(rl_tst, parse(text = "d:e:d"))
with(rl_tst, eval = parse(text = "d:e:d"))
with(rl_tst, eval = parse(text = "d:e:d()"))
with(rl_tst, parse(text = "d:e:d()"))
with(data = rl_tst, eval(parse(text = "d:e:d()")))
with(data = rl_tst, eval(parse(text = "d:e:d")))
with(data = rl_tst, eval(parse(text = "d:(e:d)")))
paste(c("a"), collapse = ":")
expand_slash <- function(slash_term)
{
split_slash_term <- strsplit(slash_term, "/",  fixed = T)[[1]]
expanded_terms_list <- list()
for (i in 1:length(split_slash_term))
{
expanded_terms_list[[i]] = paste(split_slash_term[1:i], collapse = ":")
}
return(expanded_terms_list)
}
expand_slash("a/b")
expand_slash("a/b/c")
terms(formula("y ~ (a || b)"))
terms(formula("y ~ (a||b)"))
expand_slash("a")
expanded_varying_terms_list <- unlist(lapply(c("a", "b"), expand_slash))
expanded_varying_terms_list
expanded_varying_terms_list <- lapply(c("a", "b"), expand_slash)
expanded_varying_terms_list
expanded_varying_terms_list <- sapply(c("a", "b"), expand_slash, simplify = T)
expanded_varying_terms_list
expanded_varying_terms_list <- sapply(c("a", "b"), expand_slash, simplify = F)
expanded_varying_terms_list
expanded_varying_terms_list <- lapply(c("a", "b"), expand_slash)
expanded_varying_terms_list
expanded_varying_terms_list <- unlist(lapply(c("a", "b"), expand_slash))
expanded_varying_terms_list
typeof(expanded_varying_terms_list)
expanded_varying_terms_list[1]
expanded_varying_terms_list[2]
expanded_varying_terms_list <- unlist(lapply(c("a", "b"), expand_slash), use.names = F)
expanded_varying_terms_list
expanded_varying_terms_list <- unlist(lapply(c("a", "b"), expand_slash))
expanded_varying_terms_list[[1]]
expanded_varying_terms_list[[2]]
lapply(expanded_varying_terms_list, return)
length(expanded_varying_terms_list)
lapply(expanded_varying_terms_list, function(term) {term})
expanded_varying_terms_list <- as.list(lapply(c("a", "b"), expand_slash))
expanded_varying_terms_list
expanded_varying_terms_list <- as.list(unlist(lapply(c("a", "b"), expand_slash)))
expanded_varying_terms_list
exists("a", where = expanded_varying_terms_list)
exists("a", envir = expanded_varying_terms_list <- unlist(lapply(c("a", "b"), expand_slash)))
exists("a", envir = expanded_varying_terms_list)
expanded_varying_terms_list
expanded_varying_terms_list <- as.list(unlist(lapply(c("a", "b"), expand_slash)))
exists("a", where = expanded_varying_terms_list)
expanded_varying_terms_list
exists("a", where = expanded_varying_terms_list)
expanded_varying_terms_list <- as.list(unlist(lapply(c("a", "b"), expand_slash), recursive = T))
exists("a", where = expanded_varying_terms_list)
expanded_varying_terms_list
"a" %in% expanded_varying_terms_list
unique(expanded_varying_terms_list)
expanded_varying_terms_list
expanded_varying_terms_list[expanded_varying_terms_list != 1]
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
source('~/Documents/Gelman Research/stanRegression rewrite/rl_stan_lmer.R')
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
varying_terms_list
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
varying_terms_list
group_terms_list
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
organize_random_effect_terms("1 | b", list())
organize_random_effect_terms("0 + a | b", list())
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a | b", list())
organize_random_effect_terms("1 | b", list())
organize_random_effect_terms("0 + a | b", list())
organize_random_effect_terms("a || b", list())
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
organize_random_effect_terms("a || b", list())
intercept_only_list <- organize_random_effect_terms("1 | d", list())
matrix_list <- organize_random_effect_terms("1 + b | d", list())
matrix_list
intercept_only_list
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", intercept_only_list[["d"]], rl_tst)
parse_random_eff_term("d", matrix_list[["d"]], rl_tst)
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
parse_random_eff_term("d", matrix_list[["d"]], rl_tst)
matrix_re <- parse_random_eff_term("d", matrix_list[["d"]], rl_tst)
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
source('~/Documents/Gelman Research/stanRegression rewrite/ll_stmt_routine.R')
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
source('~/Documents/Gelman Research/stanRegression rewrite/parse_terms.R')
matrix_re <- parse_random_eff_term("d", matrix_list[["d"]], rl_tst)
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
source('~/Documents/Gelman Research/stanRegression rewrite/ll_stmt_routine.R')
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
source('~/Documents/Gelman Research/stanRegression rewrite/ll_stmt_routine.R')
add_varying_term_with_intercept_rand_eff_term_to_ll_stmt(matrix_re, "")
add_varying_term_with_intercept_rand_eff_term_to_model_section(matrix_re, "")
add_varying_term_with_intercept_rand_eff_term_to_trans_param_section(matrix_re, "")
source('~/Documents/Gelman Research/stanRegression rewrite/rl_stan_lmer.R')
library(lme4)
stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy2.stan")
source('~/Documents/Gelman Research/stanRegression rewrite/rl_stan_lmer.R')
stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy2.stan")
source('~/Documents/Gelman Research/stanRegression rewrite/rl_stan_lmer.R')
stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy2.stan")
sleepstudy_obj <- stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy2.stan")
length(sleepstudy_obj$data$Days)
length(sleepstudy_obj$data$Subject)
rl_tst_cake <- stan_lmer(angle ~ recipe * temperature + (1|recipe:replicate), cake, file_name = "cake2.stan")
rl_tst_cake
rl_tst_cake$data$recipe_X_replicate
source('~/Documents/Gelman Research/stanRegression rewrite/organize_terms.R')
matrix_list <- organize_random_effect_terms("1 + b | d", list())
matrix_list
library(rstan)
library(lme4)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('~/Documents/Gelman Research/stanRegression rewrite/rl_stan_lmer.R')
sleepstudy_obj <- stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy2.stan")
tst_sleepstudy_stan <- stan("sleepstudy2.stan", model_name = "Sleepstudy", data = sleepstudy_obj$data)
summary(tst_sleepstudy_stan)$summary
summary(tst_sleepstudy_stan)$summary[,1]
summary(tst_sleepstudy_stan)$summary[30,1]
summary(tst_sleepstudy_stan)$summary[35,1]
summary(tst_sleepstudy_stan)$summary[35]
names(summary(tst_sleepstudy_stan)$summary[,1])
names(summary(tst_sleepstudy_stan)$summary[46:81,1])
summary(tst_sleepstudy_stan)$summary[46:81,1]
sort(summary(tst_sleepstudy_stan)$summary[46:81,1])
tst_sleepstudy_lmer <- lmer("Reaction ~ Days + (Days | Subject)", sleepstudy)
ranef(tst_sleepstudy_lmer)
sort(summary(tst_sleepstudy_stan)$summary[46:63,1])
summary(tst_sleepstudy_stan)$summary[46:63,1]
ranef(tst_sleepstudy_lmer)
sort(summary(tst_sleepstudy_stan)$summary[46:63,1])
sort(ranef(tst_sleepstudy_lmer))
sort(c(ranef(tst_sleepstudy_lmer)$Subject$Days, ranef(tst_sleepstudy_lmer)$Subject$`(Intercept)`)
)
sort(summary(tst_sleepstudy_stan)$summary[46:63,1])
sort(summary(tst_sleepstudy_stan)$summary[46:64,1])
sort(summary(tst_sleepstudy_stan)$summary[46:82,1])
sort(summary(tst_sleepstudy_stan)$summary[46:81,1])
sort(c(ranef(tst_sleepstudy_lmer)$Subject$Days, ranef(tst_sleepstudy_lmer)$Subject$`(Intercept)`)
)
ranef(sleepstudy)
ranef(tst_sleepstudy_lmer)
fixef(tst_sleepstudy_lmer)
sort(summary(tst_sleepstudy_stan)$summary[43:44,1])
tst_herd_lmer <- lmer(cbind(incidence, size - incidence) ~ period + (1 | herd), family = "binomial", data = cbpp)
tst_stan_obj <- stan_lmer(cbind(incidence, size - incidence) ~ period + (1 | herd), family = "binomial", data = cbpp, file_name = "herd2.stan")
tst_herd_stan <- stan("herd2.stan", model_name = "herd", data = tst_stan_obj$data, sample_file = "herd2_output")
str(sleepstudy)
head(sleepstudy)
library(stanRegression)
tst_sleepstudy_richard <- stanRegression::stan_lmer(Reaction ~ Days + (Days | Subject), sleepstudy, file_name = "sleepstudy3.stan", run_stan = T)
summary(tst_sleepstudy_richard)$summary
summary(tst_sleepstudy_richard)
summary(tst_sleepstudy_richard$fit)$summary
summary(tst_sleepstudy_richard$fit)$summary[,1]
summary(tst_sleepstudy_richard$fit)$summary[1:2,1]
fixef(tst_sleepstudy_lmer)
sort(summary(tst_sleepstudy_stan)$summary[1:2,1])
sort(summary(tst_sleepstudy_stan)$summary[43:4,1])
sort(summary(tst_sleepstudy_stan)$summary[43:44,1])
sort(summary(tst_sleepstudy_stan)$summary[1:2,1])
fixef(tst_sleepstudy_lmer)
summary(tst_sleepstudy_richard$fit)$summary[1:2,1]
summary(tst_sleepstudy_richard$fit)$summary[15,1]
names(summary(tst_sleepstudy_richard$fit)$summary)
colnames(summary(tst_sleepstudy_richard$fit)$summary)
ranef(tst_sleepstudy_lmer)
rownames(summary(tst_sleepstudy_richard$fit)$summary)
summary(tst_sleepstudy_richard$fit)$summary[23:40,1]
sort(summary(tst_sleepstudy_stan)$summary[46:81,1])
summary(tst_sleepstudy_stan)$summary[46:81,1]
summary(tst_sleepstudy_richard$fit)$summary[23:40,1]
tst_bigger_prior <- stan(file = "sleepstudy2.stan", data = sleepstudy_obj$data)
summary(tst_bigger_prior)$summary
summary(tst_bigger_prior)$summary[44:45,1]
summary(tst_bigger_prior)$summary[43:44,1]
fixef(tst_sleepstudy_lmer)
summary(tst_bigger_prior)$summary[45:81,1]
summary(tst_bigger_prior)$summary[46:81,1]
tst_herd_stan
summary(tst_herd_stan)$summary
rownames(summary(tst_herd_stan)$summary[,1])
names(summary(tst_herd_stan)$summary[,1])
summary(tst_herd_stan)$summary[17:20,1]
fixef(tst_herd_lmer)
summary(tst_herd_stan)$summary[21:35,1]
summary(tst_herd_stan)$summary[21:36,1]
summary(tst_herd_stan)$summary[21:35,1]
ranef(tst_herd_lmer)
sort(summary(tst_herd_stan)$summary[21:35,1])
sort(ranef(tst_herd_lmer))
sort(ranef(tst_herd_lmer)$herd)
ranef(tst_herd_lmer)$herd
sort(ranef(tst_herd_lmer)$herd)
sort(ranef(tst_herd_lmer)[[herd]])
sort(ranef(tst_herd_lmer)[["herd"]])
sort(unlist(ranef(tst_herd_lmer)$herd))
sort(summary(tst_herd_stan)$summary[21:35,1])
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
library(lme4)
get_factor_names("temperature", cake)
class(cake[["temperature"]])
class(cake["temperature"])
class(cake[["recipe"]])
is.factor(cake[["temperature"]])
is.factor(cake[["recipe"]])
is.factor(cake[["temp"]])
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
get_factor_names("temperature", cake)
model.matrix(~ "temperature", cake[1,])
model.matrix(formula(~ "temperature"), cake[1,])
model.matrix(formula("~ temperature"), cake[1,])
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
colnames(model.matrix(formula("~ temperature"), cake[1,]))[-1]
get_factor_names("temp", cake)
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
tst_grp_list <- list("recipe" = "temperature")
parse_random_eff_term("recipe", list("temperature"), cake)
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
parse_random_eff_term("recipe", list("temperature"), cake)
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
data(schools)
fm10 <- glmer(use ~ 1+age+I(age^2)+urban+livch+(1|district),
Contraception, binomial)
install.packages("mlmRev")
library(lme4)
tst_lmer <- lmer(angle ~ temperature + (recipe | replicate), cake)
data(tst_lmer)
tst_lmer$data
slots(tst_lmer)
tst_lmer
?merMod
model.matrix(tst_lmer)
model.frame(tst_lmer)
?model.frame
?model.matrix
str(tst_lmer at Zt)
str(tst_lmer@Zt)
t(tst_lmer@Zt)
(tst_lmer@Zt)
getME(tst_lmer)
getME(tst_lmer, name = "Zt")
t(getME(tst_lmer, name = "Zt"))
names(getME(tst_lmer, name = "Zt"))
head(getME(tst_lmer, name = "Zt"))
colnames(getME(tst_lmer, name = "Zt"))
?getME()
colnames(getME(tst_lmer, name = "X"))
colnames(getME(tst_lmer, name = "Z"))
colnames(getME(tst_lmer, name = "Ztlist"))
getME(tst_lmer, name = "Ztlist")
tst_lmer
getME(tst_lmer, name = "mmList")
terms(y ~ a + (b-d|c))
gsub(" - ", " + -", "b - d | c", fixed = T)
a <- c("Intercept", "b")
a
a[a != "Intercept"]
a <- c("b", "d")
a
a[a != "Intercept"]
a[a == "Intercept"]
c(a[a == "Intercept"], a)
a
c(a[a == "Intercept"], a)
model.matrix(~ d/e/d, rl_tst)
head(model.matrix(~ d/e/d, rl_tst))
head(model.matrix(~ d/e/f, rl_tst))
rl_tst
rl_tst$f <- rep(1:2, 25)
rl_tst
rl_tst$f <- factor(rl_tst$f)
head(model.matrix(~ d/e/f, rl_tst))
source('~/Documents/Gelman Research/stanRegression rewrite/R Code/parse_terms.R')
install.packages("knitr")
#Got data from http://www.annenbergpublicpolicycenter.org/naes-data-sets/
library(dplyr)
library(mi)
remove(list=objects())
naes_helper_function_filepath = "~/Documents/Gelman Research/Replication/Subsequent Research/naes_helper_functions.R"
source(naes_helper_function_filepath)
naes_online_data_filepath = "~/Documents/Gelman Research/Replication/Subsequent Research/naes08-online-all-waves-data-compact.txt"
naes_online_weights_filepath = "~/Documents/Gelman Research/Replication/Subsequent Research/naes08-online-weights.txt"
naes_phone_data_filepath = "~/Documents/Gelman Research/Replication/Subsequent Research/naes08-phone-nat-rcs-data-full.txt"
naes_online_survey_data_matrix <- read.table(naes_online_data_filepath, header = T, sep = "\t")
naes_online_weights_data_matrix <- read.table(naes_online_weights_filepath, header = T, sep = "\t")
naes_phone_data_matrix <- read.table(naes_phone_data_filepath, header = T, sep = "\t", fill = T)
naes_online_survey_data_matrix$ones <- 1
summarize(group_by(naes_online_survey_data_matrix, WC01_a), percent = sum(ones)/dim(naes_online_survey_data_matrix)[1] * 100)
example("selfStart")
help(SSasymp)
body(SSfoo)
body(SSasymp)
body(SSfol)
body(SSfpl)
library(car)
library(dplyr)
#Get and process raw data
setwd("~/Documents/Gelman Research/Replication/Original Research/")
#Build individual data
dat.vot <- read.table("data/votechoice2000-04-08.dat", header=T, sep="\t")
dat.vot$weight[is.na(dat.vot$weight)] <- 1
ok <- apply(is.na(dat.vot[1:8]), 1, sum)==0 &
(dat.vot$cit==1 | is.na(dat.vot$cit)) &
(dat.vot$regist=="registered" | is.na(dat.vot$regist))
dat.vot <- dat.vot[ok,]
dat.vot$year <- recode(dat.vot$file, "'2000-ann'=2000; '2004-ann'=2004; '2008-pew'=2008", as.factor.result=F)
dat.vot <- dat.vot[dat.vot$year != 2000,]
dat.vot$ones <- 1
setwd("~/Documents/Gelman Research/red_state_tutorial/Red State Tutorial/")
vote_2004_ind_inc_data <- summarize(group_by(dat.vot, inc), num_votes = sum(ones), rep_votes = sum(rvote))
barplot(vote_2004_ind_inc_data$num_votes, main = "Voters by Income", xlab = "Income Level", ylab = "Number of Individuals", col = "darkblue")
barplot(vote_2004_ind_inc_data$rep_votes, col = "red", add = T)
legend("topleft", c("Number of Voters","Number of Republican Voters"), cex=0.6,
bty="n", fill = c("darkblue", "red"))
dev.off
dev.off()
vote_2004_ind_inc_data <- summarize(group_by(dat.vot[dat.vot$year == 2004,], inc), num_votes = sum(ones), rep_votes = sum(rvote))
barplot(vote_2004_ind_inc_data$num_votes, main = "Voters by Income", xlab = "Income Level", ylab = "Number of Individuals", col = "darkblue")
barplot(vote_2004_ind_inc_data$rep_votes, col = "red", add = T)
legend("topleft", c("Number of Voters","Number of Republican Voters"), cex=0.6,
bty="n", fill = c("darkblue", "red"))
vote_2004_ind_inc_data
dim(dat.vot[dat.vot$year == 2004,])
3597+9019+16739+11311+3304
vote_2004_ind_inc_data <- summarize(group_by(dat.vot[dat.vot$year == 2004,], inc), num_votes = sum(ones), rep_votes = sum(rvote))
barplot(vote_2004_ind_inc_data$num_votes, main = "Voters by Income", xlab = "Income Level", ylab = "Number of Individuals", col = "darkblue", axis.lty = 1)
barplot(vote_2004_ind_inc_data$rep_votes, col = "red", add = T)
legend("topleft", c("Number of Voters","Number of Republican Voters"), cex=0.6,
bty="n", fill = c("darkblue", "red"))
axis(1, 1:5, c("Income Level 1", "Income Level 2", "Income Level 3", "Income Level 4", "Income Level 5"))
axis(1, 1:5, c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5"))
vote_2004_ind_inc_data <- summarize(group_by(dat.vot[dat.vot$year == 2004,], inc), num_votes = sum(ones), rep_votes = sum(rvote))
barplot(vote_2004_ind_inc_data$num_votes, main = "Voters by Income", xlab = "Income Level", ylab = "Number of Individuals", col = "darkblue", axis.lty = 1)
barplot(vote_2004_ind_inc_data$rep_votes, col = "red", add = T)
legend("topleft", c("Number of Voters","Number of Republican Voters"), cex=0.6,
bty="n", fill = c("darkblue", "red"))
axis(1, 1:5, c("Level 1", "Level 2", "Level 3", "Level 4", "Level 5"))
?logit
logit(seq(-10, 10, 0.001))
logit(seq(-10, 10, 0.01))
invlogit(seq(-10, 10, 0.01))
inv.logit(seq(-10, 10, 0.01))
plogis(seq(-10, 10, 0.01))
plot(seq(-10, 10, 0.01), plogis(seq(-10, 10, 0.01)))
plot(seq(-10, 10, 0.01), plogis(seq(-10, 10, 0.01)), xlab = "", ylab = "", main = "Inverse logit")
